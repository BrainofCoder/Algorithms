#include <stdio.h>
#include <stdlib.h>

struct Node
{
	int data;
	struct Node* npx; 
};

struct Node* XOR (struct Node *a, struct Node *b)
{
	return (struct Node*) ((long unsigned int) (a) ^ (long unsigned int) (b));
}

struct Node *getLast(struct Node * head)
{
    struct Node *curr = head, *prev = NULL, *next=head;
    
    while (next)
    {
		next = XOR(prev, curr->npx);
		prev = curr;
		curr = next;
    }
    return prev;
}

void insertFirst(struct Node **head_ref, int data)
{
	struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));
	new_node->data = data;
    new_node->npx = *head_ref;
	
	if (*head_ref != NULL)
		(*head_ref)->npx = XOR(new_node, (*head_ref)->npx);
	*head_ref = new_node;
}

void insertLast(struct Node **head_ref, int data)
{
    struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));
    new_node->data = data;
    new_node->npx=NULL;
    
    if(*head_ref==NULL)
    {
        *head_ref=new_node;
        return;    
    }
    
    struct Node *last = getLast(*head_ref);
    
    new_node->npx=last;
    last->npx = XOR(last->npx, new_node);
}

void printList(struct Node *head)
{
	struct Node *curr = head, *prev = NULL, *next;
	
	printf ("Following are the nodes of Linked List:\n");
	
	while (curr)
	{
		printf ("%d ", curr->data);
		next = XOR (prev, curr->npx);
		prev = curr;
		curr = next;
	}
	printf ("\n");
}

void delteFirst(struct Node **head)
{
    if(*head==NULL||(*head)->npx==NULL)
    {
        *head=NULL;
        return;
    }
    struct Node *prev = *head, *curr = (*head)->npx;
	curr->npx=XOR(prev,curr->npx);
    free(prev);
    *head=curr;
}

void delteLast(struct Node **head)
{
    if(*head==NULL||(*head)->npx==NULL)
    {
        *head=NULL;
        return;
    }
    struct Node *last = getLast(*head), *prev = last->npx;
    prev->npx=XOR(last,prev->npx);
    free(last);
}


int main()
{
    int i;
	struct Node *head = NULL;
	for (i=1;i<=10;i++) 
	    insertLast(&head, 10*i);
	printList(head);
	for (i=1;i<=5;i++) 
	    delteLast(&head);
	for (i=1;i<=3;i++) 
	    delteFirst(&head);
	for (i=6;i<=8;i++) 
	    insertLast(&head, 10*i);
	printList(head);
	struct Node * last=getLast(head);
	printList(last);
	return 0;
}
