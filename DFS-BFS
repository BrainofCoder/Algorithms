#include <iostream>
#include <list>
#include <string.h>

using namespace std;

class Graph
{
		int V;
		list<int> *adj;
		void DFSUtil(int v, bool visited[]);
	public:
		Graph(int V); 
		void addEdge(int v, int w);
		void BFS(int s);
		void DFS(int v);
};

Graph::Graph(int V)
{
	this->V = V;
	adj = new list<int>[V];
}

void Graph::addEdge(int v, int w)
{
	adj[v].push_back(w);
}

void Graph::BFS(int s)
{
	bool *visited = new bool[V];
	list<int> queue;
	list<int>::iterator i;
	
	memset(visited,0,V*sizeof(bool));
	visited[s] = 1;
	queue.push_back(s);

	while(!queue.empty())
	{
		s = queue.front();
		cout << s << " ";
		queue.pop_front();
		for(i = adj[s].begin(); i != adj[s].end(); i++)
			if(!visited[*i])
			{
				visited[*i] = 1;
				queue.push_back(*i);
			}
	}
}
void Graph::DFSUtil(int v, bool visited[])
{
    list<int>::iterator i;
    visited[v] = 1;
    cout << v << " ";
 
    for (i = adj[v].begin(); i != adj[v].end(); i++)
        if (!visited[*i])
            DFSUtil(*i, visited);
}
void Graph::DFS(int v)
{
    bool *visited = new bool[V];    
    memset(visited,0,V*sizeof(bool));    
    DFSUtil(v, visited);
}
int main()
{
	Graph g(4);
	g.addEdge(0, 1);
	g.addEdge(0, 2);
	g.addEdge(1, 2);
	g.addEdge(2, 0);
	g.addEdge(2, 3);
	g.addEdge(3, 3);
	cout << "\nFollowing is Breadth First Traversal " << "(starting from vertex 2) \n";
	g.BFS(2);
	cout << "\nFollowing is Depth First Traversal " << "(starting from vertex 2) \n";
	g.DFS(2);
	return 0;
}
